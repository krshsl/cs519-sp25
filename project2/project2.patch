--- ../project2/linux-5.15.0/arch/x86/entry/syscalls/syscall_64.tbl.orig	2025-04-07 12:41:29.937554684 -0600
+++ ../project2/linux-5.15.0/arch/x86/entry/syscalls/syscall_64.tbl	2025-04-07 13:06:16.321022891 -0600
@@ -343,6 +343,8 @@
 332	common	statx			sys_statx
 333	common	io_pgetevents		sys_io_pgetevents
 334	common	rseq			sys_rseq
+335 common  enable_extents  sys_enable_extents
+336 common  disable_extents  sys_disable_extents
 # don't use numbers 387 through 423, add new calls after the last
 # 'common' entry
 424	common	pidfd_send_signal	sys_pidfd_send_signal
--- ../project2/linux-5.15.0/include/linux/syscalls.h.orig	2025-04-07 12:40:51.616982331 -0600
+++ ../project2/linux-5.15.0/include/linux/syscalls.h	2025-04-07 16:59:36.770022832 -0600
@@ -1279,6 +1279,9 @@
  */
 asmlinkage long sys_ni_syscall(void);
 
+/* mm/my_extent.c */
+asmlinkage long sys_enable_extents(int pid);
+asmlinkage long sys_disable_extents(int pid);
 #endif /* CONFIG_ARCH_HAS_SYSCALL_WRAPPER */
 
 
--- ../project2/linux-5.15.0/mm/memory.c.orig	2025-04-07 12:40:16.416456295 -0600
+++ ../project2/linux-5.15.0/mm/memory.c	2025-04-07 16:49:51.141380128 -0600
@@ -3783,6 +3783,7 @@
  */
 static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
 {
+	handle_extents(vmf);
 	struct vm_area_struct *vma = vmf->vma;
 	struct page *page;
 	vm_fault_t ret = 0;
--- ../project2/linux-5.15.0/include/linux/syscalls.h.orig	2025-04-07 12:40:51.616982331 -0600
+++ ../project2/linux-5.15.0/include/linux/syscalls.h	2025-04-07 16:59:36.770022832 -0600
@@ -1279,6 +1279,9 @@
  */
 asmlinkage long sys_ni_syscall(void);
 
+/* mm/my_extent.c */
+asmlinkage long sys_enable_extents(int pid);
+asmlinkage long sys_disable_extents(int pid);
 #endif /* CONFIG_ARCH_HAS_SYSCALL_WRAPPER */
 
 
--- ../project2/linux-5.15.0/mm/Makefile.orig	2025-04-07 16:55:59.378816975 -0600
+++ ../project2/linux-5.15.0/mm/Makefile	2025-04-07 16:56:37.111373612 -0600
@@ -35,7 +35,7 @@
 CFLAGS_init-mm.o += $(call cc-disable-warning, initializer-overrides)
 
 mmu-y			:= nommu.o
-mmu-$(CONFIG_MMU)	:= highmem.o memory.o mincore.o \
+mmu-$(CONFIG_MMU)	:= highmem.o memory.o my_extent.o mincore.o \
 			   mlock.o mmap.o mmu_gather.o mprotect.o mremap.o \
 			   msync.o page_vma_mapped.o pagewalk.o \
 			   pgtable-generic.o rmap.o vmalloc.o
--- /dev/null	2025-04-07 21:26:27.960000531 -0600
+++ ../project2/linux-5.15.0/mm/my_extent.c	2025-04-07 20:44:11.819528076 -0600
@@ -0,0 +1,31 @@
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/printk.h>
+#include <linux/syscalls.h>
+
+pid_t do_extents_pid = -1;
+EXPORT_SYMBOL(do_extents_pid);
+
+SYSCALL_DEFINE0(enable_extents)
+{
+    pid_t pid = task_pid_nr(current);
+    do_extents_pid = pid;
+    return 0;
+}
+
+SYSCALL_DEFINE0(disable_extents)
+{
+    pid_t pid = task_pid_nr(current);
+    if (pid == do_extents_pid) {
+        do_extents_pid = -1;
+    }
+    return 0;
+}
+
+void handle_extents(struct vm_fault *vmf) {
+    pid_t pid = task_pid_nr(current);
+    if (pid ==  do_extents_pid) {
+        printk(KERN_INFO "Handle extents is working %d!!\n", do_extents_pid);
+    }
+}
+EXPORT_SYMBOL(handle_extents);
\ No newline at end of file
