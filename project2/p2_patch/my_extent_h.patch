--- /dev/null	2025-04-14 20:27:42.776000559 -0600
+++ ../project2/linux-5.15.0/include/linux/my_extent.h	2025-04-14 07:36:36.359489359 -0600
@@ -0,0 +1,53 @@
+#ifndef _LINUX_MY_EX_H
+#define _LINUX_MY_EX_H
+
+#include <linux/errno.h>
+
+#ifdef __KERNEL__
+
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/rbtree.h>
+#include <linux/list.h>
+
+struct list_extns {
+    unsigned long pfn;
+    unsigned long vma;
+    struct list_head pg_list;
+};
+
+struct rb_extns {
+    size_t count;
+    struct list_head p_node;
+    struct rb_node pg_tree;
+};
+
+struct rb_procs {
+    struct rb_root proc_extns;
+    struct rb_node procs_node;
+    pid_t pid;
+    // pid_t tgid; // unsure if this is required...
+    // spinlock_t lock; // maybe lock is not needed afterall??
+};
+
+void free_pg_list(struct list_head *head);
+void free_pg_tree(struct rb_root *root);
+void free_procs(void);
+void print_pg_tree(void);
+
+int find_pids(const void *key, const struct rb_node *node);
+bool add_pids(struct rb_node *node, const struct rb_node *parent);
+
+int compare_pg(struct rb_node *cursor, unsigned long vma);
+struct rb_extns *pg_search(struct rb_procs *proc, unsigned long vma);
+void pg_insert(struct rb_procs *proc, struct rb_extns *data);
+
+struct list_extns *create_extn(unsigned long vma, unsigned long pfn);
+void update_pg_extns(struct rb_extns *rb_node, unsigned long vma, unsigned long pfn);
+void create_extents(struct rb_procs *proc, struct list_extns *new_node);
+struct rb_extns *should_join_front(struct rb_procs *proc, unsigned long vma, unsigned long pfn);
+struct rb_extns *should_join_back(struct rb_procs *proc, unsigned long vma, unsigned long pfn);
+void add_extents(struct rb_procs *proc, unsigned long vma, unsigned long pfn);
+
+#endif /* __KERNEL__ */
+#endif /* _LINUX_MY_EX_H */
