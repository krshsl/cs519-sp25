--- ./linux-5.15.0/kernel/exit.c.orig	2025-05-08 18:43:23.585742882 -0600
+++ ./linux-5.15.0/kernel/exit.c	2025-05-08 20:36:54.159164329 -0600
@@ -65,6 +65,7 @@
 #include <linux/compat.h>
 #include <linux/io_uring.h>
 #include <linux/sysfs.h>
+#include <linux/my_inactive.h>
 
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
@@ -773,11 +774,43 @@
 static inline void check_stack_usage(void) {}
 #endif
 
+void remove_inactive_task(struct task_struct *tsk) {
+    struct inactive_cpu *cpu = NULL;
+    struct list_head *cursor = NULL, *tmp = NULL;
+    struct inactive_tasks *node = NULL;
+    unsigned long cpu_flags;
+    if (tsk->inactive_tracker == -1) {
+        return;
+    }
+
+    cpu = &per_cpu(ia_cpu_queue, tsk->inactive_cpu); // techincally it should be the same cpu, but why bother
+    LOG_FUNCS(KERN_INFO, "Begins... %d::%d", tsk->inactive_cpu, tsk->pid);
+    if (cpu->counter == 0) { // no input present???
+        return;
+    }
+
+    raw_spin_lock_irqsave(&cpu->lock, cpu_flags);
+	list_for_each_safe(cursor, tmp, &cpu->proc_list) {
+	    node = list_entry(cursor, struct inactive_tasks, head);
+		if (node->pid != tsk->pid) continue;
+		cpu->counter--;
+		list_del(&node->head);
+		kfree(node);
+		LOG_FUNCS(KERN_INFO, "Key removed... %d::%d", tsk->inactive_cpu, tsk->pid);
+		break;
+	}
+	raw_spin_unlock_irqrestore(&cpu->lock, cpu_flags);
+	LOG_FUNCS(KERN_INFO, "Ends... %d::%d", tsk->inactive_cpu, current->pid);
+	return;
+}
+
 void __noreturn do_exit(long code)
 {
+
 	struct task_struct *tsk = current;
 	int group_dead;
 
+    remove_inactive_task(tsk);
 	/*
 	 * We can get here from a kernel oops, sometimes with preemption off.
 	 * Start by checking for critical errors.
